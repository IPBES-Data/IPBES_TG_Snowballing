---
title: Technical Guideline Series
subtitle: Snowballing for Literature Search and Analysis
date: today
author:
  - name: Rainer M Krug
    id: rmk
    orcid: 0000-0002-7490-0066
    email: Rainer.Krug@Senckenberg.de, Rainer@Krugs.de
    affiliation: 
      - name: Senckenberg
        city: Frankfurt (Main)
        url: https://www.senckenberg.de/en/institutes/sbik-f/
    roles: [author, editor]
  - name: Aidin Niamir
    id: an
    orcid: 0000-0003-4511-3407
    email: Aidin.Niamir@Senckenberg.de
    affiliation: 
      - name: Senckenberg
        city: Frankfurt (Main)
        url: https://www.senckenberg.de/en/institutes/sbik-f/
    roles: [editor]
abstract: > 
  In addition to the typical literature search using search terms,
  one can conduct a snowballing search, which is searching, starting 
  from a set of identified key-papers, the publications cited in the key papers
  as well as the publictions citing the key-paper. This search is much more 
  focussed on the topic of the key-papers and provides, as a ind of by-product, 
  the citation network of the papers. Here we will discuss how this can be 
  achieved with code examples and mention some shortcomings and abvantages of 
  this approach. Furthermore, we will outline some analysis approaches and 
  possibilities of a citation network without going into to moch detail  
keywords:
  - literature search
  - snowballing
  - citation network
license: "CC BY"
copyright: 
  holder: No idea
  year: 2023
citation: 
  type: report
  container-title: IPBES Technical Guidelines on Snowballing
  doi: xxxxx
doi: xxxxx
version: 0.0.2

format:
    html:
        toc: true
        toc-depth: 4
        toc_expand: true
        embed-resources: true
        code-fold: false
        code-summary: 'Show the code'
    docx:
        toc: true
        toc-depth: 4
        prefer-html: true
---

```{r}
#| label: setup
#| include: false
# This is needed to execute the inline code
```


Prepared by 
- [Rainer M. Krug](mailto:Rainer.Krug@Senckenberg.de) - IPBES Task Force on Knowledge and Data. 

Reviewed by 
- [Aidin Niamir](mailto:Aidin.Niamir@Senckenberg.de) - IPBES Technical Support Unit for Knowledge and Data
<!-- - IPBES Task Force on Knowledge and Data**  -->

*For any inquires please contact [Aidin.Niamir@senckenberg.de](mailto:aidin.niamir@senckenberg.de)* 

**Version:** `r rmarkdown::metadata$version`

Last updated: `r Sys.Date() |> format("%d %B, %Y")`


## Introduction

Snowballing in literature search and analysis refers to the approach to search for literature
starting from a set of identified key-papers. These key-papers should cover the range of 
the topic which should be covered by the literature search, and also contain the most relevant 
papers of the topic. Starting from these key-papers, the papers which are **cited** in the key-papers
(also called backward search) as well as the papers which are **citing** the key papers 
(also called forward search) are identified. 

Consequently, the selection of the key-papers is essential o=in determining the resulting 
coverage of the topic by the literature identified by the snowball search.

## Methods

### Databases suitable for Snowballing
In principle, snowballing can be done with most (if not all) literature
databases. Examples are Web of Science and Scopus (CONFIRM) which provide the possibility to 
search from the web interface for papers citing a specific paper. But this can only be done from the web 
interface and for one article at the time, so it is very cumbersome. One could use the provided APIs, 
but these become easily extremely expensive and still ladden with restrictions.

A better database for this type if search is [OpenAlex](https://openalex.org), which has 
free API access which is for all practical purposes unlimited. Therefore, the Snowball 
search can be scripted, and API clients are available for many different programming languages.

This technical guideline will forus particularly on the use of OpenAlex through the R package 
[openalexR](https://docs.ropensci.org/openalexR/articles/A_Brief_Introduction_to_openalexR.html) 
which is perfectly suited for this task, in addition to being easy to use.

### Snowballing in R

#### Installation and loading of the package
The package [openalexR](https://docs.ropensci.org/openalexR/articles/A_Brief_Introduction_to_openalexR.html) 
is available from CRAN and can be installed using

```{r}
#| eval: false
install.packages(openalexR)
```

and loaded using

```{r}
#| eval: true
library(openalexR)
```

#### Snowballing
Let's assume, we have a list of DOIs of the key papers, which ghave been identified by 
experts with knowledge of the field.

```{r}
#| eval: true
dois <- c(
    "10.1016/j.marpol.2023.105710", "10.1007/s13280-014-0582-z",
    "10.1016/j.cosust.2022.101160", "10.1146/annurev-environ-102014-021340",
    "10.1016/j.eist.2016.09.001", "10.1016/j.cosust.2019.12.004"
)
```

As the snowball search in OpenAlex is based on identifiers internal ids, the DOIs 
need to be converted to internal ids. This can be done using the function `oa_fetch()`
of the pack=ge `openalexR` which can take a list of DOIs and returns a list of works 
as provided py OpenAlex. The function has many other arguments, but I will concentrate
here on the use for this specific example. For more information, please refer to the 
help in R or the [documentation](https://docs.ropensci.org/openalexR/reference/index.html).

```{r}
#| label: fetch_works

key_works <- oa_fetch(
    entity = "works",
    doi = dois,
    verbose = FALSE
)

ids <- openalexR:::shorten_oaid(key_works$id)
```

Now the snowball search can be conducted using the function `oa_snowball()`. 
Here, I wrap the function call into a `if then else` as the snowball can take 
some time to run, and loading it from disk is much faster and efficient.

```{r}
#| label: snowball

fn <- file.path("data", "snowball.rds")
if (file.exists(fn)) {
    snowball <- readRDS(fn)
} else {
    snowball <- oa_snowball(
        identifier = ids,
        verbose = FALSE
    )
    saveRDS(snowball, fn)
}
```

The resulting list, has two elements:
- **`nodes`** which contains the nodes of the citation network, i.e. the individual publications (or `works` in the terminology of OpenAlex) and
- **`edges`** which contains the edges of the citation network, i.e. the citations between the works.

The edges only contain the citations from and to the key papers, so the citation network does not include any citations between the newly identified works. We will come back to this later.

Another useful function is `snowball2df()` which flattens the object returned by `oa_snowball()` into a tibble.
It is usually much easier to work with this flat structure
```{r}
#| label: snowball2df

flat_snow <- snowball2df(snowball) |>
    tibble::as_tibble()
```

#### Plotting the network
There ara many doifferent packages in R to plot networks ([igraph](https://r.igraph.org), [ggraph](https://ggraph.data-imaginist.com) together eith [tidygraph](https://tidygraph.data-imaginist.com) and others).

For now, I will only show how to plt the network using `ggraph` and `tidygraph` and not go into details how the plot can be tweaked.



```{r}
#| label: plot_network

library(tidygraph)
library(ggraph)

fn <- file.path("figures", "cited_by_count.png")
if (!file.exists(fn)) {
 p_cb <- ggraph::ggraph(tidygraph::as_tbl_graph(snowball), 
        graph = , layout = "stress") + ggraph::geom_edge_link(ggplot2::aes(alpha = ggplot2::after_stat(index)), 
        show.legend = FALSE) + ggraph::geom_node_point(ggplot2::aes(fill = oa_input, 
        size = cited_by_count), shape = 21, color = "white") + 
        ggraph::geom_node_label(ggplot2::aes(filter = oa_input, 
            label = id), nudge_y = 0.2, size = 3) + ggraph::scale_edge_width(range = c(0.1, 
        1.5), guide = "none") + ggplot2::scale_size(range = c(3, 
        10), guide = "none") + ggplot2::scale_fill_manual(values = c("#a3ad62", 
        "#d46780"), na.value = "grey", name = "") + ggraph::theme_graph() + 
        ggplot2::theme(plot.background = ggplot2::element_rect(fill = "transparent", 
            colour = NA), panel.background = ggplot2::element_rect(fill = "transparent", 
            colour = NA), legend.position = "bottom") + ggplot2::guides(fill = "none") + 
        ggplot2::ggtitle(paste0("Cited by count"))
    ggplot2::ggsave(file.path("figures", "cited_by_count.pdf"), 
        plot = p_cb, device = cairo_pdf, width = 20, height = 15)
    ggplot2::ggsave(file.path("figures", "cited_by_count.png"), 
        plot = p_cb, width = 20, height = 15, bg = "white", dpi = 600)
}
```
![](figures/cited_by_count.png)

There ara many options on how these plots can be tweaked, but this is beyond the 
scope of this technical guideline to go into details. Please see the 
documentation of [ggraph](https://ggraph.data-imaginist.com) and 
[tidygraph](https://tidygraph.data-imaginist.com) the two packages for more information.

#### Supplementing the citation network

As mentioned above, the citation network does not include ay links between the newly 
identified works, as these are included only through citing the key papers. This can be 
easily be changed, as the works returned from OpenAlex contain a field which lists all the ids 
of the works which are citing the work. This field is called `referenced_works` and can be used to 
supplement the citation network. 
We need to filter these works to only include the works
in the original citation network, and add the new edges to the `snowball$edges` object:

```{r}
#| label: supplement_citation_network

library(tibble)

fn <- file.path("data", "snowball_supplemented.rds")
if (file.exists(fn)) {
    snowball_supplemented <- readRDS(fn)
} else {
    new_edges <- tibble(
        from = character(0),
        to = character(0)
    )

    ## all the works in the citation network
    works <- snowball$nodes$id

    ## check if the works in the `referenced_works` field are in the citation network
    ## and if yes, add them to new_edges 
    for (i in 1:nrow(snowball$nodes)) {
        from <- works[[i]]
        to <- gsub("https://openalex.org/", "", snowball$nodes$referenced_works[[i]])
        to_in_works <- to[to %in% works]
        if (length(to_in_works) > 0) {
            new_edges <- add_row(
                new_edges,
                tibble(
                    from = from,
                    to = to_in_works
                )
            )
        }
    }

    ## add the new edges to the citation network but only the unique ones
    snowball_supplemented <- snowball
    snowball_supplemented$edges <- add_row(snowball_supplemented$edges, new_edges) |>
        distinct()

    saveRDS(snowball_supplemented, fn)
}
```

Now we can plot the supplemented citation network:

```{r}
#| label: plot_supplemented_network

fn <- file.path("figures", "supplemented_cited_by_count.png")
if (!file.exists(fn)) {
    p_cb <- ggraph::ggraph(tidygraph::as_tbl_graph(snowball_supplemented),
        graph = , layout = "stress"
    ) + ggraph::geom_edge_link(ggplot2::aes(alpha = ggplot2::after_stat(index)),
        show.legend = FALSE
    ) + ggraph::geom_node_point(ggplot2::aes(
        fill = oa_input,
        size = cited_by_count
    ), shape = 21, color = "white") +
        ggraph::geom_node_label(ggplot2::aes(
            filter = oa_input,
            label = id
        ), nudge_y = 0.2, size = 3) + ggraph::scale_edge_width(range = c(
            0.1,
            1.5
        ), guide = "none") + ggplot2::scale_size(range = c(
            3,
            10
        ), guide = "none") + ggplot2::scale_fill_manual(values = c(
            "#a3ad62",
            "#d46780"
        ), na.value = "grey", name = "") + ggraph::theme_graph() +
        ggplot2::theme(plot.background = ggplot2::element_rect(
            fill = "transparent",
            colour = NA
        ), panel.background = ggplot2::element_rect(
            fill = "transparent",
            colour = NA
        ), legend.position = "bottom") + ggplot2::guides(fill = "none") +
        ggplot2::ggtitle(paste0("Cited by count"))
    ggplot2::ggsave(file.path("figures", "supplemented_cited_by_count.pdf"),
        plot = p_cb, device = cairo_pdf, width = 20, height = 15
    )
    ggplot2::ggsave(file.path("figures", "supplemented_cited_by_count.png"),
        plot = p_cb, width = 20, height = 15, bg = "white", dpi = 600
    )
}
```
![](figures/supplemented_cited_by_count.png)

As one can easily see, the number of citations (edges) is much higher, 
and the network is much more connected. A visual inspection is therefore not 
possible anymore, and one needs to use other methods to analyse the network. 
One possiblility is to identify clusters in the citation network.

#### Identifying clusters in the citation network

One approach to identify clusters in the citation network is to use the edge.betweenness
which is a measure which ??????.

This clustering is implemented in the [igraph](https://r.igraph.org) package.

HERE I NEED IDEAS!!!!

```{r}
#| eval: false

library(igraph)

g <- igraph::graph_from_data_frame(
  d = snowball$edges, 
  # vertices = snowball$nodes,
  directed = TRUE
)
eb <- cluster_edge_betweenness(g)

layout <- layout.fruchterman.reingold(g)
plot(
  eb, g,
  layout = layout
)
```

#### Interactive network chart
Interactive network graphs are also possible, and mainly useful for smaller networks and for exploring the network.

```{r}
library(networkD3)

p <- simpleNetwork(
  Data = snowball$edges,
  height="50px", width="50px",
  zoom = TRUE
)
p
```

## Advantages and disadvantages of snowballing

Final version that has been approved by the Plenary and is ready for publication:

| Description | Version |
| --- | --- |
| File submitted for publication | `r rmarkdown::metadata$version` |